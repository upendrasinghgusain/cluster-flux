# docker stuff
docker build -t clusterflux-api .
docker run --name clusterflux-api -p 32780:8080 clusterflux-api
docker login
docker tag clusterflux-api upendragusain/clusterflux-api
docker push upendragusain/clusterflux-api
docker run --name cf1 -p 32781:8080 upendragusain/clusterflux-api

# create ssh keys
ssh-keygen -t rsa -b 4096

# list vm ips
az vm list-ip-addresses --resource-group rg-cluster-flux --output table



########################### prep master vm for k3s ###################################
# add inbund AllowAnyCustom6443Inbound

#ssh into vm
ssh -i C:\Users\UGusain\Downloads\vm1_key.pem upendragusain@172.166.237.233

curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--tls-san 172.166.237.233" sh -
(TLS SANs: Always install K3s with --tls-san to include public IPs or DNS names in the certificate.)

sudo chmod 644 /etc/rancher/k3s/k3s.yaml
export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

# prep local machine to use kubctl (copy it to a file in local machine)
sudo cat /etc/rancher/k3s/k3s.yaml

# set kubctl config file path
set KUBECONFIG=C:\Users\UGusain\Downloads\k3s.yaml

(# install curl on local machine)

# deploy to k8s (from saved yaml file)
kubectl apply -f web-demo.yaml
kubectl get svc web-api-svc
kubectl get pods -l app=web-api

(Add an inbound rule fro the port in vm)
curl http://172.167.201.51:30849



########################### prep worker vm for k3s ###################################

# on master
sudo cat /var/lib/rancher/k3s/server/node-token

# on worker
curl -sfL https://get.k3s.io | K3S_URL=https://master-ip:6443 K3S_TOKEN=<token> K3S_NODE_NAME=node-1 sh -



########################### prep worker vm for k3s ###################################

kubectl get svc

# Delete all workload resources in default namespace
kubectl delete all --all

# scaling
kubectl scale deployment web-api-deployment --replicas=5
kubectl get pods -l app=web-api -o wide

#Restart k3s
sudo systemctl restart k3s



########################### setup options ###################################

#1
A single-node server installation
with manual setup
with nodeport
with web api only

#2
one master node with worker node(s) installation
with manual setup
with nodeport
with web api only



########################### end game ###################################
k3s HA cluster (3+2) with load balancer and ingress
quoting api + rabbitmq + worker + open source sql db
k8s auto scaling setup
load testing framework
k8s scaling dashboard 
next: Azure Virtual Machine Scale Set (VMSS) 
    (for Cluster Autoscaler (CA) scales the number of nodes (VMs or physical machines) in your Kubernetes cluster. 
    Horizontal Pod Autoscaler (HPA) versus Cluster Autoscaler (CA))





####################### networking ####################################

Create a single Azure Virtual Network (VNet) and a single Subnet within it.

Create a single Network Security Group (NSG) and associate it with that subnet. 
Define all the necessary inbound rules as described in the "NSG Rules" section of the previous detailed instructions.
(remember region vcpu limit!) requested new limit
https://learn.microsoft.com/en-us/azure/quotas/regional-quota-requests
public ip only on  load balancer


####################### todo ####################################
make provisioning repeatable
use paths for different websites clusterflux.co.uk/quoting, clusterflux.co.uk/policy etc.
look into scaling dashboard or visualization (lens!)
host rabbitmq in the cluster
make it accessible from the quoting api
load testing (k6!)